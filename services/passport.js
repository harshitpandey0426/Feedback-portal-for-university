const passport=require('passport')
const GoogleStrategy=require('passport-google-oauth20').Strategy;
const keys=require('../config/keys');//NO need to say keys.js(i.e extension is not required) sotred in keys since it is returning values;
const mongoose=require('mongoose');
const User=mongoose.model('users'); //2 argument means we are going to load something in mongoose and 1 argument means we are going to fetch somtehing from mongoose
                                    //User object here is our model class
passport.serializeUser((user,done) => {  //take our user model and put some identifying piece of information into it   //serialise user is a predefined function we are going to define our function and pass it to thi serializeuser function
    // user here is our instance of user
    done(null,user.id);// this is the identifying piece of information which will identify our user when it log in again
                        //this user.id is not profile id it is the '_id' automatically generated by mongo which is unique
                        //the reason we are using this is because profileid is of google here but user might sign in with facebook or linkedin etc.       
                    //profile id is useful for us just when user is making first attempt to sign in after that we will use mongodb ID 
    });
    
passport.deserializeUser((id,done) =>{ //opposite of serializeablity //function to convert user id back to user.
    User.findById(id).then(user=>{
        done(null,user)
    })

});
passport.use(
new GoogleStrategy(
    {
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: "/auth/google/callback",
    },
    async (accessToken, refereshToken, profile, done) => {
    try {
        const oldUser = await User.findOne({ googleId: profile.id });

        if (!oldUser) {
        const user = new User({ googleId: profile.id });
        await user.save();
        return done(null, user);
        }
        done(null, oldUser);
    } catch (err) {
        console.log(err.message);
    }
    }
)
);


